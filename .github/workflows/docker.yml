# This workflow will build a Java project with Maven, build the docker image and publish it to github

name: Java CI with Docker

on:
  push:
    branches: [ master, feature/* ]
  pull_request:
    branches: [ master ]
env:
  IMAGE_NAME: docker-gh-action

jobs:
  #reuse Maven JAR generation
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.14
      uses: actions/setup-java@v1
      with:
        java-version: 1.14
    - name: Cache Maven deps
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build with Maven
      run: mvn -B package --file pom.xml

#We should also test our docker container, but that'll be for another project focused on docker practices
#Here we simply build & push our docker image
  push:
    # Ensure build job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build image
      run: docker build . --file Dockerfile --tag image

    - name: Log into registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

    - name: Push image
      run: |
        IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag image $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION

